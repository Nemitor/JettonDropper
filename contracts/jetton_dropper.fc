#include "imports/stdlib.fc";
#include "op_codes.fc";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int storage::merkle_root;
global int storage::merkle_depth;
global slice storage::owner;


global int ctx_id;
global int ctx_counter;
global int senq;
global int node_dict_key_len;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    storage::merkle_root = ds~load_uint(256);
    storage::merkle_depth = ds~load_uint(8);
    storage::owner = ds~load_msg_addr();
    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);
    node_dict_key_len = ds~load_int(32);
    senq = ds~load_uint(32);
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(storage::merkle_root, 256)
            .store_uint(storage::merkle_depth, 8)
            .store_slice(storage::owner)
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .store_int(node_dict_key_len,32)
            .store_uint(senq,32)
            .end_cell()
    );
}


int hash_nodes(int a, int b) impure {
    return begin_cell().store_uint(a, 256).store_uint(b, 256).end_cell().cell_hash();
}

int get_node(cell p, int i) impure {
    (slice v, int ok) = p.udict_get?(32, i);
    throw_unless(error::node_not_found, ok);
    return v.preload_uint(256);
}


int check_proof(int root, cell proof, int leaf, int leaf_index, int depth) impure {
    int i = 0;
    int cur = leaf;
    while (i < depth) {
        int is_right = (leaf_index >> i) & 1;
        if (is_right) {
            cur = hash_nodes(proof.get_node(i), cur);
        } else {
            cur = hash_nodes(cur, proof.get_node(i));
        }
        i += 1;
    }
    return cur == root;
}

() claim(cell proof, int leaf,int leaf_index) impure {
    ctx_counter += 1;
    save_data();
    ;;По сути тест на проверку до после

    throw_unless(error::bad_proof,
        check_proof(storage::merkle_root, proof, leaf, leaf_index, storage::merkle_depth));
    ctx_counter += 2;
    save_data();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    }

    if(op == op::setroot){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));

        storage::merkle_root = in_msg_body~load_uint(256);
        storage::merkle_depth = in_msg_body~load_uint(8);
        save_data();
        return();
    }

    if(op == op::claim){
        cell proof = in_msg_body~load_ref();
        int leaf = in_msg_body~load_int(32);
        int leaf_index = in_msg_body~load_int(32);
        claim(proof,leaf,leaf_index);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

int get_merkle_root() method_id {
    load_data();
    return storage::merkle_root;
}
int get_merkle_depth() method_id {
    load_data();
    return storage::merkle_depth;
}
