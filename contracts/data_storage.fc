#include "op_codes.fc";
#include "imports/stdlib.fc";
#include "imports/math.fc";

int tuple_length (tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";
forall X -> (tuple) to_tuple (X x) asm "NOP";

global slice storage::master;
global slice storage::jetton_wallet_addres;
global slice storage::owner;
global int storage::activate_keys;
global int ctx_id;

global cell storage::data_tree_root;
const keys = 86954;

() load_data() impure {
    var ds = get_data().begin_parse();

    storage::master = ds~load_msg_addr();
    storage::jetton_wallet_addres = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    storage::activate_keys = ds~load_uint(32);
    ctx_id = ds~load_uint(32);
    storage::data_tree_root = ds~load_ref();
    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(storage::master)
            .store_slice(storage::jetton_wallet_addres)
            .store_slice(storage::owner)
            .store_uint(storage::activate_keys,32)
            .store_uint(ctx_id,32)
            .store_ref(storage::data_tree_root)
            .end_cell()
    );
}

(int) calculate_depth(int cell_index) impure inline {
    if(cell_index <= 0){
        return 0;
    }
    int max_per_depth = 0;
    int i = 0;
    while (max_per_depth < cell_index){
        i = i + 1;
        max_per_depth = max_per_depth + math::pow(4,i);
    }
    return i;
}

(int) cells_per_depth(int depth) impure inline {
    if(depth <= 0){
        return 0;
    }
    int max_per_depth = 0;
    int i = 0;
    while (i < depth){
        i = i + 1;
        max_per_depth = max_per_depth + math::pow(4,i);
    }
    return max_per_depth + 1;
}

(tuple) reverse_tuple (tuple t1) impure inline {
    tuple t2 = empty_tuple();
    repeat (t1.tuple_length()) {
        var value = t1~tpop();
        t2~tpush(value);
    }
    return t2;
}

(tuple) calculate_index_path(int cell_index) impure {
    tuple path = empty_tuple();
    if(cell_index == 0){
        return path;
    }
    if(cell_index < 5){
        path~tpush(cell_index - 1);
        return path;
    }

    int depth = calculate_depth(cell_index) - 1;
    int cels_per_depth = cells_per_depth(depth);
    int difference = cell_index - cels_per_depth;
    int up_level_difference = difference / 4;
    path~tpush(difference % 4);

    while (depth > 0){
        depth = depth - 1;
        cels_per_depth = cells_per_depth(depth);
        cell_index = cels_per_depth + up_level_difference;
        difference = cell_index - cels_per_depth;
        up_level_difference = difference / 4;
        path~tpush(difference % 4);
    }
    return reverse_tuple(path);
}

(int) get_bit(slice number, int index) impure inline {
    if(index != 0){
        number~skip_bits(index - 1);
    }
    int x = number~load_uint(1);
    return x;
}

(slice) set_bit(slice number, int index) impure {
    var c = begin_cell();
    if(index != 0){
        c = c.store_slice(number~load_bits(index - 1));
    }
    else {
        index += 1;
    }

    c~store_uint(1,1);
    number~skip_bits(1);
    c = c.store_slice(number~load_bits(1023 - index));
    cell cc = end_cell(c);

    var ds = cc.begin_parse();
    slice new_slice = ds~load_bits(1023);
    return new_slice;
}

(cell) change_cell_bit(cell data_cell, int bit_index) impure {
    var ds = data_cell.begin_parse();
    slice data = ds~load_bits(1023);
    builder new_data_cell_builder = begin_cell();

    if (get_bit(data,bit_index) == 1) {
        throw(error::invalid_key);
    }
    else {
        new_data_cell_builder = new_data_cell_builder.store_slice(set_bit(data, bit_index));
    }

    while (ds.slice_refs_empty?() != -1 ){
        new_data_cell_builder = new_data_cell_builder.store_ref(ds~load_ref());
    }
    ds.end_parse();

    return new_data_cell_builder.end_cell();
}

(cell) change_data_cell(cell root, int bit_index) impure {

    tuple path = calculate_index_path(bit_index / 1023);
    if(path.tuple_length() == 0){
        return change_cell_bit(root,bit_index);
    }
    tuple back_path = empty_tuple();
    tuple cells = empty_tuple();
    tuple chields_per_depth = empty_tuple();
    tuple keys_data = empty_tuple();
    var reader = root.begin_parse();
    cell next_cell = null();

    while (path.tuple_length() > 0){
        keys_data~tpush(reader~load_bits(1023));
        int index = path~tpop();
        back_path~tpush(index);
        int i = 0;
        int update = 0;

        while (reader.slice_refs_empty?() != -1){
            if(i == index){
                next_cell = reader~load_ref();
                update = 1;
            }
            else {
                cells~tpush(reader~load_ref());
            }
            i += 1;
        }
        throw_if(1232,update == 0);
        chields_per_depth~tpush(i);
        reader.end_parse();
        if(path.tuple_length() != 0){
            reader = next_cell.begin_parse();
        }
    }
    next_cell = change_cell_bit(next_cell,bit_index % 1023);

    while (back_path.tuple_length() > 0){
        var top_level_cell = begin_cell().store_slice(keys_data~tpop());
        int index = back_path~tpop();
        int i = 0;
        int chields = chields_per_depth~tpop();
        tuple sort_cells = empty_tuple();
        while (chields > i){
            if(i != index){
                sort_cells~tpush(cells~tpop());
            }
            i += 1;
        }
        i = 0;
        while (chields > i ){
            if(i == index){
                top_level_cell = top_level_cell.store_ref(next_cell);
            }
            else {
                top_level_cell = top_level_cell.store_ref(sort_cells~tpop());
            }
            i += 1;
        }
        next_cell = top_level_cell.end_cell();
    }

    return next_cell;
}

() send_jettons(slice jetton_wallet, int query_id, int amount, slice dest,
slice comment) impure inline {
    cell forward = begin_cell().store_uint(0, 32).store_slice(comment)
        .end_cell();
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(jetton_wallet)
        .store_uint(op::transfer, 4 + 107 + 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(dest)
        .store_uint(0, 3)
        .store_coins(10 * 1000000)
        .store_dict(forward)
        .end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if(op == op::data_claim){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::master));
        throw_if(786, storage::activate_keys >= keys);
        ;;read data form internal message
        int key_number = in_msg_body~load_uint(32);
        slice claimer_address = in_msg_body~load_msg_addr();

        storage::data_tree_root = change_data_cell(storage::data_tree_root, key_number);
        send_jettons(
            storage::jetton_wallet_addres,
            0,
            200 * 1000000000,
            claimer_address,
            "Congratulations, you got the tokens, will you try to get them a second time? :)"
        );
        storage::activate_keys += 1;
        save_data();
        return ();
    }

    if(op == op::admin_withdraw){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        int amount = in_msg_body~load_uint(32);
        send_jettons(
            storage::jetton_wallet_addres,
            0,
            amount * 1000000000,
            sender_address,
            "Admin, withdraw"
        );
        return();
    }
    if(op == op::update_master){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        storage::master = in_msg_body~load_msg_addr();
        save_data();
        return();
    }
    if(op == op::setwallet){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        storage::jetton_wallet_addres = in_msg_body~load_msg_addr();
        save_data();
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

cell get_data_tree_root() method_id {
    load_data();
    return storage::data_tree_root;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

slice get_master() method_id {
    load_data();
    return storage::master;
}

slice get_jetton_wallet_addres() method_id {
    load_data();
    return storage::jetton_wallet_addres;
}

slice get_owner() method_id {
    load_data();
    return storage::owner;
}

int get_activate_keys() method_id {
    load_data();
    return storage::activate_keys;
}