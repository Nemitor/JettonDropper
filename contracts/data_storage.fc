#include "op_codes.fc";
#include "imports/stdlib.fc";
#include "imports/math.fc";

global slice storage::master;
global slice storage::jetton_wallet_address;
global slice storage::owner;
global int storage::activate_keys;
global int ctx_id;

global cell storage::data_tree_root;
const keys = 100000;

() load_data() impure {
    var ds = get_data().begin_parse();

    storage::master = ds~load_msg_addr();
    storage::jetton_wallet_address = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    storage::activate_keys = ds~load_uint(32);
    ctx_id = ds~load_uint(32);
    storage::data_tree_root = ds~load_dict();
    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(storage::master)
            .store_slice(storage::jetton_wallet_address)
            .store_slice(storage::owner)
            .store_uint(storage::activate_keys,32)
            .store_uint(ctx_id,32)
            .store_dict(storage::data_tree_root)
            .end_cell()
    );
}


() send_jettons(slice jetton_wallet, int query_id, int amount, slice dest,
slice comment) impure inline {
    cell forward = begin_cell().store_uint(0, 32).store_slice(comment)
        .end_cell();
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(jetton_wallet)
        .store_uint(op::transfer, 4 + 107 + 32)
        .store_uint(query_id, 64)
        .store_coins(amount)
        .store_slice(dest)
        .store_uint(0, 3)
        .store_coins(10 * 1000000)
        .store_dict(forward)
        .end_cell(), 64);
}

(int) get_bit_in_cell(cell keys_cell, int key) impure inline {
    var data_slice = keys_cell.begin_parse();
    data_slice~skip_bits(key);
    int res = data_slice~load_uint(1);
    return res;
}

(cell) change_bit_in_cell(cell keys_cell, int key) impure inline {
    var new_cell = begin_cell();
    var data_slice = keys_cell.begin_parse();
    new_cell = new_cell.store_slice(data_slice~load_bits(key));
    new_cell = new_cell.store_uint(1,1);
    data_slice~skip_bits(1);
    new_cell = new_cell.store_slice(data_slice~load_bits(1023 - key - 1));
    return new_cell.end_cell();
}

(cell) change_data_cell(cell data_cell, int key_number){
    int cell_unumber = key_number / 1023;
    int cell_key_number = key_number % 1023;
    var (cell target_cell, int found_cell) = udict_get_ref?(data_cell,8,cell_unumber);
    throw_unless(564,found_cell);
    throw_if(error::invalid_key, get_bit_in_cell(target_cell,cell_key_number) == 1);
    var new_key_cell = change_bit_in_cell(target_cell,cell_key_number);
    data_cell~udict_delete?(8,cell_unumber);
    data_cell~udict_set_ref(8,cell_unumber,new_key_cell);
    return data_cell;
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op

    if(op == op::data_claim){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::master));
        throw_if(786, storage::activate_keys >= keys);
        ;;read data form internal message
        int key_number = in_msg_body~load_uint(32);
        slice claimer_address = in_msg_body~load_msg_addr();

        storage::data_tree_root = change_data_cell(storage::data_tree_root, key_number);
        send_jettons(
            storage::jetton_wallet_address,
            0,
            200 * 1000000000,
            claimer_address,
            "Congratulations, you got the tokens, will you try to get them a second time? :)"
        );
        storage::activate_keys += 1;
        save_data();
        return ();
    }

    if(op == op::admin_withdraw){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        int amount = in_msg_body~load_uint(32);
        send_jettons(
            storage::jetton_wallet_address,
            0,
            amount * 1000000000,
            sender_address,
            "Admin, withdraw"
        );
        return();
    }

    if(op == op::update_master){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        storage::master = in_msg_body~load_msg_addr();
        save_data();
        return();
    }

    if(op == op::setwallet){
        throw_unless(error::not_owner, equal_slices(sender_address, storage::owner));
        storage::jetton_wallet_address = in_msg_body~load_msg_addr();
        save_data();
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

cell get_data_tree_root() method_id {
    load_data();
    return storage::data_tree_root;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

slice get_master() method_id {
    load_data();
    return storage::master;
}

slice get_jetton_wallet_address() method_id {
    load_data();
    return storage::jetton_wallet_address;
}

slice get_owner() method_id {
    load_data();
    return storage::owner;
}

int get_activate_keys() method_id {
    load_data();
    return storage::activate_keys;
}